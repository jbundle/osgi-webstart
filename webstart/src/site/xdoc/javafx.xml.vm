<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>OSGi to Web Start Web Bundle</title>
    <author email="don@donandann.com">Don Corley</author>
  </properties>

  <!-- Optional HEAD element, which is copied as is into the XHTML <head> element -->
<!-- head>
<meta />
</head  -->

  <body>

     <section name="JavaFX deployment examples">
        <p>
        The OSGi to Web start bundle is perfect for deploying JavaFX modules. Besides simplifying the deploy process, your jars are automatically packed and gziped
        for quick downloads. JavaFX modules are the same as any other java program. All you have to do is place your JFXPanel in a JApplet.
        You can supply your own jnlp template, or use this one:
        </p>
        <p>
        For this example, we'll use a very simple javafx program. You can find it in java central at: 
        java -classpath target/org.jbundle.javafx.example.helloworld-1.0.0-SNAPSHOT.jar:$JAVA_HOME/jre/lib/jfxrt.jar  org.jbundle.javafx.example.helloworld.HelloWorldJavaFX
        </p>
        <p>
        Try this <a href="http://localhost:8181/webstart/docs/applet.html?appletClass=org.jbundle.javafx.example.helloworld.HelloWorldJavaFX&amp;template=docs/javafx.jnlp">simple JavaFX program</a>.
        </p>
        <p>
        If you want to deploy a JavaFX application that was not packaged with an OSGi manifest, just use the wrap protocol to automatically generate a manifest.<br/>
        For example, if this was a regular java jar file, in karaf I would just type:<br/>
        <code>install wrap:file:///home/don/workspace/workspace/jbundle/javafx/helloworld/target/org.jbundle.javafx.example.helloworld-1.0.0-SNAPSHOT.jar</code><br/>
        and I'm ready to run the application from a browser with the same command that we used in the first example. 
        </p>
        <p>
        Since the OSGi to webstart servlet has access to OSGi resources, you can package your startup parameters and/or jnlp template in your project's jar file.
        For example take a look at the url on
        <a href="http://localhost:8181/webstart/docs/applet.html?webStartPropertiesFile=org/jbundle/javafx/example/helloworld/javafx.properties">this sample</a>.
        The applet's params come from the sample appplication's jar file.
        </p>

    </section>

  </body>

</document>
