<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>OSGi to Web Start Web Bundle</title>
    <author email="don@donandann.com">Don Corley</author>
  </properties>

  <!-- Optional HEAD element, which is copied as is into the XHTML <head> element -->
<!-- head>
<meta />
</head  -->

  <body>

<section name="OSGi to Web Start Java Applet Development">
<p>
Developing applets to run in a browser is easy. Just write your applet the way you usually would,
just extend Applet or JApplet. For example, to deploy this very simple applet, I need to deploy it to my
OSGi container. (the wrap protocol will add a OSGi information to a normal jar file).<br/>
<code>install wrap:http://repo.maven.apache.org/maven2/org/jbundle/util/webapp/org.jbundle.util.webapp.sample/1.3.0/org.jbundle.util.webapp.sample-1.3.0.jar</code><br/>
Now I can run it in my browser just by supplying the main class name:<br/>
<a href="http://localhost:8181/webstart/docs/applet.html?applet=org.jbundle.util.webapp.sample.App">http://localhost:8181/webstart/docs/applet.html?applet=org.jbundle.util.webapp.sample.App</a><br/>
</p>
<p>
If you want your application to be more browser friendly, you can add some simple methods to your application to interact
with the web browser. Then you can respond to browser forward and back commands, your users will be able to bookmark pages
in your java applet.
</p>
<p>
The browser manager java code is in an independent jar file. You can optionally install the code by checking the existence of
javascript bridge by coding:<br/>
<code>
try   { // Add browser connection if running as an applet<br/>
    Class.forName("netscape.javascript.JSObject"); // Test if this exists<br/>
    Map&lt;String,Object&gt; mapInitialCommand = new HashMap&lt;String,Object&gt;();<br/>
    // Add the parms that you expect for your initial screen<br/>
    browserManager = new BrowserManager(this, mapInitialCommand);    // This will throw an exception if there is a no browser<br/>
} catch (Exception ex)  { // Ignore if no browser<br/>
}<br/>
</code>  
</p>
<p>
When you change screens, just call<br/>
<code>
browserManager.pushBrowserHistory(strHistory, browserTitle);<br/>
</code>
to add to the browser's history (and change the url hash).<br/>
If you do a 'back' internally in your program, you can sync the web browser by typing:<br/>
<code>
bCommandHandledByJava = true;<br/>
browserManager.popBrowserHistory(quanityToPop, bCommandHandledByJava, browserTitle);<br/>
</code>
</p>
<p>
On the callback side, your applet should implement the BrowserCallbacks interface:<br/>
<code>
public interface BrowserCallbacks<br/>
{<br/>
    /**<br/>
     * The browser back button was pressed (Javascript called me).<br/>
     * @param command The command that was popped from the browser history.<br/>
     */<br/>
    public void doJavaBrowserBack(String command);<br/>
    /**<br/>
     * The browser back button was pressed (Javascript called me).<br/>
     * @param command The command that was popped from the browser history.<br/>
     */<br/>
    public void doJavaBrowserForward(String command);<br/>
    /**<br/>
     * The browser hash value changed (Javascript called me).<br/>
     * @param command The command that was popped from the browser history.<br/>
     */<br/>
    public void doJavaBrowserHashChange(String command);<br/>
}<br/>
</code>
These methods are called from javascript when a browser action occurs.
</p>
<p>
For an example, take a look at the thin and thick framework in the <a href="http://www.jbundle.org">jbundle</a> project.
Specifically, look at the java.js javascript file and the BaseApplet class from the jbundle class for an example
of how this works.
</p>
    </section>

  </body>

</document>
